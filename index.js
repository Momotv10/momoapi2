const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
app.use(express.json());

// ŸÖÿ≥ÿßÿ± ÿ≠ŸÅÿ∏ ÿßŸÑÿ¨ŸÑÿ≥ÿ©
const sessionPath = path.join(__dirname, '.wwebjs_auth');

// ŸÖÿ≥ÿßÿ± ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä
const outputPath = path.join(__dirname, 'output');
if (!fs.existsSync(outputPath)) {
    fs.mkdirSync(outputPath, { recursive: true });
}

// ÿ™ÿ≠ŸÇŸÇ ŸÖŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ŸÖÿ≠ŸÅŸàÿ∏ÿ©
const isSessionSaved = fs.existsSync(sessionPath);

// ÿ•ÿπÿØÿßÿØ ÿπŸÖŸäŸÑ WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({
        dataPath: sessionPath // ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ≥ÿßÿ± ÿ≠ŸÅÿ∏ ÿßŸÑÿ¨ŸÑÿ≥ÿ©
    }),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

// ŸÖÿ™ÿ∫Ÿäÿ± ŸÑÿ™ÿÆÿ≤ŸäŸÜ QR Code ŸÉÿµŸàÿ±ÿ©
let qrCodeImageUrl = null;

// ÿ™ŸàŸÑŸäÿØ QR Code ŸÉÿµŸàÿ±ÿ© (ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ŸÖÿ≠ŸÅŸàÿ∏ÿ©)
client.on('qr', async (qr) => {
    if (!isSessionSaved) {
        console.log("‚úÖ QR Code generated. Generating image...");

        // ÿ•ŸÜÿ¥ÿßÿ° QR Code ŸÉÿµŸàÿ±ÿ©
        const qrCodeImage = await qrcode.toDataURL(qr);
        qrCodeImageUrl = qrCodeImage;

        console.log("‚úÖ QR Code image generated. Use the following URL to scan:");
        console.log(qrCodeImageUrl); // Ÿáÿ∞ÿß ŸáŸà ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿµŸàÿ±ÿ©
    }
});

// ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿπŸÖŸäŸÑ ÿ¨ÿßŸáÿ≤
client.on('ready', () => {
    console.log('‚úÖ WhatsApp Client is ready!');

    // ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ÿπŸÜÿØ ÿ¨ÿßŸáÿ≤Ÿäÿ© ÿßŸÑÿπŸÖŸäŸÑ
    const fileContent = `This file was created automatically at ${new Date().toISOString()}`;
    const filePath = path.join(outputPath, 'auto_created_file.txt');

    fs.writeFileSync(filePath, fileContent);
    console.log(`‚úÖ File created at: ${filePath}`);

    // ÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅ ÿ•ŸÑŸâ GitHub ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)
    uploadFileToGitHub(filePath);
});

// API ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ©
app.post('/send', async (req, res) => {
    const { phone, message } = req.body;

    if (!phone || !message) {
        return res.status(400).json({ success: false, error: "ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ŸàÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ!" });
    }

    try {
        await client.sendMessage(`${phone}@c.us`, message);
        res.json({ success: true, message: "‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©!" });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// API ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ QR Code ŸÉÿµŸàÿ±ÿ©
app.get('/qrcode', (req, res) => {
    if (!qrCodeImageUrl) {
        return res.status(404).json({ success: false, error: "QR Code not generated yet." });
    }
    res.send(`<img src="${qrCodeImageUrl}" alt="QR Code" />`);
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
const PORT = process.env.PORT || 8080;
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Server is running on port ${PORT}`);
});

// ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿπŸÖŸäŸÑ
client.initialize();

// ÿØÿßŸÑÿ© ŸÑÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅ ÿ•ŸÑŸâ GitHub
const uploadFileToGitHub = (filePath) => {
    const simpleGit = require('simple-git');
    const git = simpleGit();

    git.add(filePath)
        .commit('Auto-created file added')
        .push('origin', 'main', (err) => {
            if (err) {
                console.error('‚ùå Failed to upload file to GitHub:', err);
            } else {
                console.log('‚úÖ File uploaded to GitHub successfully');
            }
        });
};
